# The configurations that used for the recording, feel free to edit them
config:
  # Specify a command to be executed
  # like `/bin/bash -l`, `ls`, or any other commands
  # the default is bash for Linux
  # or powershell.exe for Windows
  # command: source /Users/alessiabellisario/.zshrc
  command: zsh

  # Specify the current working directory path
  # the default is the current working directory path
  cwd: /Users/alessiabellisario/Documents/defer-presentation

  # Export additional ENV variables
  env:
    recording: true

  # Explicitly set the number of columns
  # or use `auto` to take the current
  # number of columns of your shell
  cols: 120

  # Explicitly set the number of rows
  # or use `auto` to take the current
  # number of rows of your shell
  rows: 20

  # Amount of times to repeat GIF
  # If value is -1, play once
  # If value is 0, loop indefinitely
  # If value is a positive number, loop n times
  repeat: 0

  # Quality
  # 1 - 100
  quality: 100

  # Delay between frames in ms
  # If the value is `auto` use the actual recording delays
  frameDelay: auto

  # Maximum delay between frames in ms
  # Ignored if the `frameDelay` isn't set to `auto`
  # Set to `auto` to prevent limiting the max idle time
  maxIdleTime: 2000

  # The surrounding frame box
  # The `type` can be null, window, floating, or solid`
  # To hide the title use the value null
  # Don't forget to add a backgroundColor style with a null as type
  frameBox:
    type: floating
    title: "@defer with Apollo Router"
    style:
      border: 2px solid '#FFA3E0'
      margin: 10px
      boxShadow: 0px 0px 0px 20px rgb(49, 28, 135)
  # frameBox:
  #   type: floating
  #   title: Terminalizer
  #   style:
  #     border: 0px black solid
  # boxShadow: none
  # margin: 0px

  # Add a watermark image to the rendered gif
  # You need to specify an absolute path for
  # the image on your machine or a URL, and you can also
  # add your own CSS styles
  watermark:
    imagePath: null
    style:
      position: absolute
      right: 15px
      bottom: 15px
      width: 100px
      opacity: 0.9

  # Cursor style can be one of
  # `block`, `underline`, or `bar`
  cursorStyle: block

  # Font family
  # You can use any font that is installed on your machine
  # in CSS-like syntax
  fontFamily: "SF Mono, Lucida Console, Ubuntu Mono, Monospace"

  # The size of the font
  fontSize: 17

  # The height of lines
  lineHeight: 1

  # The spacing between letters
  letterSpacing: 0

  # Theme
  theme:
    background: "transparent"
    foreground: "#afafaf"
    cursor: "#c7c7c7"
    black: "#232628"
    red: "#fc4384"
    green: "#b3e33b"
    yellow: "#ffa727"
    blue: "#75dff2"
    magenta: "#ae89fe"
    cyan: "#708387"
    white: "#d5d5d0"
    brightBlack: "#626566"
    brightRed: "#ff7fac"
    brightGreen: "#c8ed71"
    brightYellow: "#ebdf86"
    brightBlue: "#75dff2"
    brightMagenta: "#ae89fe"
    brightCyan: "#b1c6ca"
    brightWhite: "#f9f9f4"

# Records, feel free to edit them
records:
  - delay: 1368
    content: "\e[1m\e[7m%\e[27m\e[1m\e[0m                                                                               \r \r\e]2;alessiabellisario@alessias-mbp-2:~/Documents/defer-presentation\a\e]1;..-presentation\a"
  - delay: 31
    content: "\r\e[0m\e[27m\e[24m\e[J\e[01;32m➜  \e[36mdefer-presentation\e[00m \e[01;34mgit:(\e[31mmain\e[34m) \e[33m✗\e[00m \e[K\e[?1h\e=\e[?2004h"
  - delay: 531
    content: "c\bcurl --request POST \\\r\r\n  -\e[K-header 'content-type: application/json' \\\r\r\n  -\e[K-header 'accept: multipart/mixed;boundary=\"graphql\";deferSpec=20220824' \\\r\r\n  -\e[K-url 'https://main--alessia-bellisarios-rfqf1c.apollographos.net/graphql' \\\r\r\n  -\e[K-data '{\"variables\": {\"name\": \"charmander\"},\"operationName\": \"Pokemon\",\"query \r\e[K\"\r\":\"query Pokemon($name: String!) {...PokemonDetails @defer regions { results { i \r\e[Kd\rd name __typename } __typename }} fragment PokemonDetails on Query {  pokemon(na \r\e[Km\rme: $name) { species { id }  __typename}}\"}"
  - delay: 11
    content: "\e[?2004l\r\r\n\e]2;curl --request POST --header 'content-type: application/json' --header  --url\a\e]1;curl\a"
  - delay: 235
    content: "\r\r\n--graphql\r\r\ncontent-type: application/json\r\r\n\r\r\n{\"data\":{\"regions\":{\"__typename\":\"BaseList\",\"results\":[{\"__typename\":\"BaseName\",\"id\":1,\"name\":\"kanto\"},{\"__typename\":\"BaseName\",\"id\":2,\"name\":\"johto\"},{\"__typename\":\"BaseName\",\"id\":3,\"name\":\"hoenn\"},{\"__typename\":\"BaseName\",\"id\":4,\"name\":\"sinnoh\"},{\"__typename\":\"BaseName\",\"id\":5,\"name\":\"unova\"},{\"__typename\":\"BaseName\",\"id\":6,\"name\":\"kalos\"},{\"__typename\":\"BaseName\",\"id\":7,\"name\":\"alola\"},{\"__typename\":\"BaseName\",\"id\":8,\"name\":\"galar\"},{\"__typename\":\"BaseName\",\"id\":9,\"name\":\"hisui\"},{\"__typename\":\"BaseName\",\"id\":10,\"name\":\"paldea\"}]}},\"hasNext\":true}\r\r\n--graphql\r\r\n"
  - delay: 3066
    content: "content-type: application/json\r\r\n\r\r\n{\"hasNext\":false,\"incremental\":[{\"data\":{\"pokemon\":{\"__typename\":\"Pokemon\",\"species\":{\"id\":null}}},\"path\":[]}]}\r\r\n--graphql--\r\r\n\e[1m\e[7m%\e[27m\e[1m\e[0m                                                                               \r \r\e]2;alessiabellisario@alessias-mbp-2:~/Documents/defer-presentation\a\e]1;..-presentation\a"
  - delay: 56
    content: "\r\e[0m\e[27m\e[24m\e[J\e[01;32m➜  \e[36mdefer-presentation\e[00m \e[01;34mgit:(\e[31mmain\e[34m) \e[33m✗\e[00m \e[K\e[?1h\e=\e[?2004h"
